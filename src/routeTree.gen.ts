/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ServiceServiceImport } from './routes/_service/_service'
import { Route as ServiceSpaceIndexImport } from './routes/_service/space/index'
import { Route as ServiceModelingIndexImport } from './routes/_service/modeling/index'
import { Route as ServiceHeadshotsIndexImport } from './routes/_service/headshots/index'
import { Route as ServiceEditorialIndexImport } from './routes/_service/editorial/index'
import { Route as ServiceAboutIndexImport } from './routes/_service/about/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceServiceRoute = ServiceServiceImport.update({
  id: '/_service/_service',
  getParentRoute: () => rootRoute,
} as any)

const ServiceSpaceIndexRoute = ServiceSpaceIndexImport.update({
  id: '/_service/space/',
  path: '/space/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceModelingIndexRoute = ServiceModelingIndexImport.update({
  id: '/_service/modeling/',
  path: '/modeling/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceHeadshotsIndexRoute = ServiceHeadshotsIndexImport.update({
  id: '/_service/headshots/',
  path: '/headshots/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceEditorialIndexRoute = ServiceEditorialIndexImport.update({
  id: '/_service/editorial/',
  path: '/editorial/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceAboutIndexRoute = ServiceAboutIndexImport.update({
  id: '/_service/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_service/_service': {
      id: '/_service/_service'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ServiceServiceImport
      parentRoute: typeof rootRoute
    }
    '/_service/about/': {
      id: '/_service/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof ServiceAboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/_service/editorial/': {
      id: '/_service/editorial/'
      path: '/editorial'
      fullPath: '/editorial'
      preLoaderRoute: typeof ServiceEditorialIndexImport
      parentRoute: typeof rootRoute
    }
    '/_service/headshots/': {
      id: '/_service/headshots/'
      path: '/headshots'
      fullPath: '/headshots'
      preLoaderRoute: typeof ServiceHeadshotsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_service/modeling/': {
      id: '/_service/modeling/'
      path: '/modeling'
      fullPath: '/modeling'
      preLoaderRoute: typeof ServiceModelingIndexImport
      parentRoute: typeof rootRoute
    }
    '/_service/space/': {
      id: '/_service/space/'
      path: '/space'
      fullPath: '/space'
      preLoaderRoute: typeof ServiceSpaceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ServiceServiceRoute
  '/about': typeof ServiceAboutIndexRoute
  '/editorial': typeof ServiceEditorialIndexRoute
  '/headshots': typeof ServiceHeadshotsIndexRoute
  '/modeling': typeof ServiceModelingIndexRoute
  '/space': typeof ServiceSpaceIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ServiceServiceRoute
  '/about': typeof ServiceAboutIndexRoute
  '/editorial': typeof ServiceEditorialIndexRoute
  '/headshots': typeof ServiceHeadshotsIndexRoute
  '/modeling': typeof ServiceModelingIndexRoute
  '/space': typeof ServiceSpaceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_service/_service': typeof ServiceServiceRoute
  '/_service/about/': typeof ServiceAboutIndexRoute
  '/_service/editorial/': typeof ServiceEditorialIndexRoute
  '/_service/headshots/': typeof ServiceHeadshotsIndexRoute
  '/_service/modeling/': typeof ServiceModelingIndexRoute
  '/_service/space/': typeof ServiceSpaceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/editorial'
    | '/headshots'
    | '/modeling'
    | '/space'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/about' | '/editorial' | '/headshots' | '/modeling' | '/space'
  id:
    | '__root__'
    | '/'
    | '/_service/_service'
    | '/_service/about/'
    | '/_service/editorial/'
    | '/_service/headshots/'
    | '/_service/modeling/'
    | '/_service/space/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ServiceServiceRoute: typeof ServiceServiceRoute
  ServiceAboutIndexRoute: typeof ServiceAboutIndexRoute
  ServiceEditorialIndexRoute: typeof ServiceEditorialIndexRoute
  ServiceHeadshotsIndexRoute: typeof ServiceHeadshotsIndexRoute
  ServiceModelingIndexRoute: typeof ServiceModelingIndexRoute
  ServiceSpaceIndexRoute: typeof ServiceSpaceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ServiceServiceRoute: ServiceServiceRoute,
  ServiceAboutIndexRoute: ServiceAboutIndexRoute,
  ServiceEditorialIndexRoute: ServiceEditorialIndexRoute,
  ServiceHeadshotsIndexRoute: ServiceHeadshotsIndexRoute,
  ServiceModelingIndexRoute: ServiceModelingIndexRoute,
  ServiceSpaceIndexRoute: ServiceSpaceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_service/_service",
        "/_service/about/",
        "/_service/editorial/",
        "/_service/headshots/",
        "/_service/modeling/",
        "/_service/space/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_service/_service": {
      "filePath": "_service/_service.tsx"
    },
    "/_service/about/": {
      "filePath": "_service/about/index.tsx"
    },
    "/_service/editorial/": {
      "filePath": "_service/editorial/index.tsx"
    },
    "/_service/headshots/": {
      "filePath": "_service/headshots/index.tsx"
    },
    "/_service/modeling/": {
      "filePath": "_service/modeling/index.tsx"
    },
    "/_service/space/": {
      "filePath": "_service/space/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
